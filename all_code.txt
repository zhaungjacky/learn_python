
learn_csv.py
import csv
import os

ori_csv_file = "/home/zxl/dev/projects/python/learn_test/assets/names.csv"

file_dir = os.path.dirname(ori_csv_file)
new_csv_file = os.path.join(file_dir,"new_names.csv")
# print(new_csv_file)


# with open(new_csv_file,"r") as csv_file:
#     csv_reader = csv.reader(csv_file,delimiter="\t")
#     for line in csv_reader:
#         print(line)

with open(ori_csv_file,"r") as csv_file:
    csv_reader = csv.DictReader(csv_file)
    # next(csv_reader)

    with open(new_csv_file,"w") as new_file:

        fields_names = ['first_name','last_name','email']
        # fields_names = ['first_name','last_name']

        csv_writer = csv.DictWriter(
            new_file,
            delimiter="\t",
            fieldnames=fields_names,
        )

        csv_writer.writeheader()

        for line in csv_reader:
            # del line['email']
            csv_writer.writerow(line)

    # with open(new_csv_file,"w") as new_file:
    #     csv_writer = csv.writer(new_file,delimiter="\t")

    #     for line in csv_reader:
    #         csv_writer.writerow(line)

# #     # csv_reader.__next__()
# #     for line in csv_reader:
# #         print(line[2])



learn_comprehensions.py
from typing import List


nums: List[int] = [1,2,3,4,5,6,7,8,9]

pow_nums = [x*x if x > 5 else x*x*x for x in nums if x % 2 != 0]

print(pow_nums)


learn_datetime.py
import datetime
import pytz



# dt= datetime.datetime(2024,6,11,5,44,58,tzinfo=pytz.UTC)

dt_utc_now= datetime.datetime.now(tz=pytz.UTC) # cool one

dt_mtn = dt_utc_now.astimezone(pytz.timezone('US/Pacific'))
# for tz in pytz.all_timezones:
#     print(tz)
# dt_utc= datetime.datetime.now(datetime.UTC).replace(tzinfo=pytz.UTC)


# print(dt)
print(dt_utc_now)
# dt= datetime.datetime(2024,6,11,5,44,58,100)


# print(dt.time())
# d = datetime.datetime.now()
# tday = datetime.date.today()
# # print(d)
# # print(tday)

# tdelta = datetime.timedelta(7)

# bday = datetime.date(2025,3,4)

# t_bday = bday - tday

# print(t_bday.days)
# print(t_bday.total_seconds())

# print(tday - tdelta)


learn_os.py
import os
from datetime import datetime



file_path = (os.path.join(os.getcwd(),"os.txt"))
print(os.path.dirname(file_path))
print(os.path.basename(file_path))

if os.path.exists(file_path):
    print("exists")

print(dir(datetime))

# print(file_path)
# with open(file_path,'r') as f:
#     lines = f.readline()
#     print(lines)
# os.chdir("/home/zxl/dev/projects/python")
# print(os.getcwd())

# for dirpath, dirnames, filenames in os.walk("/home/zxl/dev/projects/python"):
# for dirpath, dirnames, filenames in os.walk(os.getcwd()):
#     print(f"current dir path: {dirpath}")
#     print(f"current dirnames: {dirnames}")
#     print(f"current filenames: {dirnames}")
#     print("_______________________________________")
 
# mod_time = os.stat("os.txt").st_mtime


# print(os.getcwd())
# print(datetime.fromtimestamp(mod_time))


learn_file_read_write.py

# f = open("os.txt",'r') 

# print(f.mode)

# f.close()

# with open("os.txt",'r') as f: # when finish code  automatic close the file
#     # f_content = f.readlines() # list
#     # f_content = f.readline() # each line

#     # for line in f_content:
#     #     print(line)
#     # print(f_content)
#     # for line in f:
#     #     print(line,end = " ")
#     size_to_read = 50

#     f_content = f.read(size_to_read)
#     f.seek(0)
#     while len(f_content) > 0:
#         print(f_content, end="*")
#         f_content = f.read(size_to_read)

    # f_content = f.read(100)
    # print(f_content,end = " ")
    # f_content = f.read(100)
    # print(f_content,end = " ")
    # f_content = f.read(100)
    # print(f_content,end = " ")
# print(f.closed)

# with open("test2.txt","a") as f:
#     f.seek(0)
#     f.write("hello + 1")

# with open("os.txt","r") as rf:
#     with open("test_copy.txt",'w') as wf:
#         for line in rf:
#             wf.write(line)

#binary mode
with open("issue.png",'rb') as rf:
    with open("issue_copy.png","wb") as wf:
            chunk_size = 4096
            rf_chunk = rf.read(chunk_size)
            while len(rf_chunk) > 0:
                wf.write(rf_chunk)
                rf_chunk = rf.read(chunk_size)
                  


learn_class.py
import datetime
from typing import List


#  python OOP
class Employee:

    num_of_emps: int = 0
    raise_amount: float = 1.04

    def __init__(
        self,
        fname: str,
        lname: str,
        hobby: list[str] = None,
        salary: float = 3000.0,
    ) -> None:
        self.fname = fname
        self.lname = lname
        self.hobby = hobby
        self.salary = salary
        self.info = f"{self.fname} earn {self.salary} now!"
        Employee.num_of_emps += 1

    @property
    def email(self) -> str:
        return f"{self.fname.lower()}.{self.lname.lower()}@company.com"


    # regular method
    @property
    def fullname(self) -> str:
        return f"{self.fname} {self.lname}"
    
    @fullname.setter
    def fullname(self,new_name: str):
        fname,lname = new_name.split(" ")
        self.fname = fname
        self.lname = lname

    @fullname.deleter
    def fullname(self):
        print("delete name")
        self.fname = None
        self.lname = None
        # self.fname = None
        # self.fname = None



    def apply_raise(self):
        self.salary = float(self.salary * self.raise_amount)
        # self.salary = int(self.salary * Employee.apply_raise)

    
    def __repr__(self) -> str: #  for debug
        return f"Employee('{self.fname}','{self.lname}',{self.hobby},{self.salary})"

    def __str__(self) -> str:
        return f"{self.fullname()} - {self.info}"
    
    def __add__(self, other_emp): 
        return self.salary + other_emp.salary
    
    def __len__(self):
        return len(self.fullname())
        
    
    @classmethod
    def set_raise_amount(cls, amount):
        cls.raise_amount = amount

    @classmethod
    def from_string(cls, emp_str: str):
        fname, lname, salary = emp_str.split("-")
        return cls(
            fname=fname,
            lname=lname,
            hobby=None,
            salary=salary,
        )

    @staticmethod
    def is_workday(day: datetime.date) -> bool:
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True

emp_1 = Employee("Corey","Schafer",["python"],9800.0)
emp_2 = Employee("Jacky","Nelson",["dart"],8800.0)

# print(emp_1.info)
# print(emp_1.email)
# emp_1.fname = "Jone"

emp_1.fullname = "Shining Zhaung"
print(emp_1.info)
print(emp_1.email)
print(emp_1.fullname)

del emp_1.fullname
# print(emp_1.info)
# print(emp_1.email)
# print(emp_1.fullname)

# add_salary = emp_1.__add__(emp_2)
# print(add_salary)
# print(emp_1 + emp_2)
# print(len(emp_1))
# emp_2 = Employee('Corey','Schafer',['python'],9800.0)
# print(emp_1)
# print(repr(emp_1))
# print(str(emp_1))
# print(emp_1.__repr__())
# print(emp_1.__str__())

# print(1 +2)
# print(int.__add__(1,2))

class Developer(Employee):

    raise_amount: float = 1.1

    def __init__(
        self,
        fname: str,
        lname: str,
        prog_lang: str,
        hobby: List[str] = None,
        salary: float = 6000.0,
    ) -> None:
        super().__init__(fname, lname, hobby, salary,)
        self.prog_lang = prog_lang
        self.email = f"{fname.lower()}.{lname.lower()}@gmail.com"

class Manager(Employee):

    def __init__(
        self,
        fname: str,
        lname: str,
        employees: List[Developer] = None,
        hobby: List[str] = None,
        salary: float = 7000.0,
    ) -> None:
        super().__init__(fname, lname, hobby, salary)
        if employees is None:
            self.employees= []
        else:
            self.employees = employees

    def add_emp(self, new_emp: Developer):
        if new_emp not in self.employees:
            self.employees.append(new_emp)
    def remove_emp(self, emp: Developer):
        if emp  in self.employees:
            self.employees.remove(emp)

    def prinf_emps(self):
        for emp in self.employees:
            print(f"-->{emp.fullname()}")


# dev_1 = Developer(
#     fname="Corey",
#     lname="Schafer",
#     prog_lang="python"
# )
# dev_2 = Developer(
#     fname="test",
#     lname="Employee",
#     prog_lang="dart",
#     salary=8800
# )

# manger_1 = Manager(fname="Alex",lname="Collison",hobby=["money","manager"],salary=7777,employees=[dev_1])


# print(isinstance(manger_1,Developer))
# print(isinstance(dev_1,Manager))
# print(isinstance(dev_2,Employee))

# print(issubclass(Manager,Employee))
# print(issubclass(Manager,Developer))

# manger_1.add_emp(dev_1)
# manger_1.add_emp(dev_2)
# manger_1.prinf_emps()
# manger_1.add_emp(dev_2)
# manger_1.prinf_emps()
# manger_1.remove_emp(dev_1)
# manger_1.prinf_emps()

# print(dev_1.prog_lang)
# print(dev_2.prog_lang)

# print(dev_1.salary)
# dev_1.apply_raise()
# print(dev_1.salary)

# print(help(Developer))

# print(dev_2.info)
# print(dev_2.email)

# emp_1 = Employee(
#     fname="Jacky",
#     lname="Zhaung",
#     hobby=[
#         "dota2",
#         "coding",
#     ],
#     salary=5000,
# )
# emp_2 = Employee(
#     fname="Corey",
#     lname="Schafer",
#     hobby=[
#         "dota2",
#         "coding",
#     ],
#     salary=5150,
# )

# print(Employee.is_workday(datetime.date(2024, 6, 8)))

# emp_str_1 = "John-Doe-7000"
# emp_str_2 = "Steve-Smith-8000"
# emp_str_3 = "Mike-Jordon-9000"
# new_emp_1 = Employee.from_string(emp_str_1)
# new_emp_2 = Employee.from_string(emp_str_2)
# new_emp_3 = Employee.from_string(emp_str_3)

# print(new_emp_1.info)
# print(new_emp_2.info)
# print(new_emp_3.info)


# Employee.set_raise_amount(1.08)
# emp_1.raise_amount = 1.06

# print(emp_1.raise_amount)
# print(emp_2.raise_amount)
# print(Employee.raise_amount)

# emp_1.raise_amount = 1.06

# print(emp_1.__dict__)
# print(emp_2.__dict__)

# print(emp_1.raise_amount)
# print(emp_2.raise_amount)
# print(Employee.raise_amount)

# print(Employee.num_of_emps)

# print(emp_1.__dict__)
# print("___________________")
# print(Employee.__dict__)
# print(emp_1)
# print(emp_2)

# print(emp_1.raise_amount)
# print(emp_2.raise_amount)
# print(Employee.raise_amount)


# me.salary(5851)
# me.fullname()
# print(Employee.fullname(emp_1))

# full_name = me.fullname()
# print(me.salary)
# print(me.info)
# print(full_name)
# for hobby in me.hobby:
#     print(hobby)



learn_parse_name.py
import csv

csv_file = "/home/zxl/dev/projects/python/learn_test/assets/patrons.csv"

new_file = "/home/zxl/dev/projects/python/learn_test/assets/new_patrons.csv"

html_output=""
names=[]

with open(csv_file,"r") as data_file:
    # csv_data = csv.reader(data_file)
    csv_data = csv.DictReader(data_file,delimiter=",")

    next(csv_data) # do not want the first line
    # next(csv_data) # do not want the second line
    # print(list(csv_data))
    # field_names = ["FirstName","LastName"]
    for line in csv_data:
        if line["FirstName"] == "No Reward":
            break
        names.append(f"{line['FirstName']} {line['LastName']}")

    # with open(new_file,"w") as new_csv:
    #     pass 

html_output += f'<p>There are currently {len(names)} public contributors. Thank you</p>'
html_output  += "\n<ul>"
for name in names:
    html_output += f"\n\t<li>{name}<\li>"
html_output  += "\n</ul>"
# for name in names:
#     print(name)

print(html_output)


learn_random.py
import random

deck = list(range(1,53))
random.shuffle(deck)
# print(deck) 

hand = random.sample(deck,k=5)

print(hand)
# greetings = ['hello','hi','hey','hola']
# colors = ['red','green','blue']

# rnd_float = random.uniform(0,99)
# rnd_int = random.randint(0,10)

# rg= random.choice(greetings)
# colors= random.choices(colors,weights=[9,9,2],k=10)



# print(rnd_int)
# print(rnd_float)
# print(f"{rg} , Corey")
# print(colors)


learn_mongodb.py
import pymongo
import datetime

myclient = pymongo.MongoClient("mongodb://localhost:27017/")

mydb = myclient["feathers-chat-mongodb"]

mycol = mydb["messages"]

# dblists = mydb.list_collection_names()
# for x in dblists:
#     print(x)
# print("The database exists.") if "mydatabase" in dblists else print("not exists")

# mydb = myclient["mydatabase"]

# data={
#     "text": "hello again hi",
#     "userId": '65b61611918d5344890d1783',

#     "createdAt": datetime.datetime.now()
# }
# x = mycol.insert_one(data)
# manyX= mycol.insert_many([])
# print(x.inserted_id)

for x in mycol.find({},{ "_id": 0, "text": 1, "createdAt": 1 }):
  print(x)





learn_math.py
import json


with open("/home/zxl/dev/projects/python/learn_test/json.json",'r') as local_file:
    data = json.load(local_file)
    for x in data:
        print(type(x))

local_file.close()

# txt = f"The price is {95:.2f} dollars"
# print(txt)

# username = input("Enter username:")
# print("Username is: " + username)


# import re

# []	A set of characters	"[a-m]"	
# \	Signals a special sequence (can also be used to escape special characters)	"\d"	
# .	Any character (except newline character)	"he..o"	
# ^	Starts with	"^hello"	
# $	Ends with	"planet$"	
# *	Zero or more occurrences	"he.*o"	
# +	One or more occurrences	"he.+o"	
# ?	Zero or one occurrences	"he.?o"	
# {}	Exactly the specified number of occurrences	"he.{2}o"	
# |	Either or	"falls|stays"	
# ()	Capture and group	
# 
# \A	Returns a match if the specified characters are at the beginning of the string	"\AThe"	
# \b	Returns a match where the specified characters are at the beginning or at the end of a word
# (the "r" in the beginning is making sure that the string is being treated as a "raw string")	r"\bain"

# r"ain\b"	

# \B	Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word
# (the "r" in the beginning is making sure that the string is being treated as a "raw string")	r"\Bain"

# r"ain\B"	

# \d	Returns a match where the string contains digits (numbers from 0-9)	"\d"	
# \D	Returns a match where the string DOES NOT contain digits	"\D"	
# \s	Returns a match where the string contains a white space character	"\s"	
# \S	Returns a match where the string DOES NOT contain a white space character	"\S"	
# \w	Returns a match where the string contains any word characters (characters from a to Z, digits from 0-9, and the underscore _ character)	"\w"	
# \W	Returns a match where the string DOES NOT contain any word characters	"\W"	
# \Z	Returns a match if the specified characters are at the end of the string	"Spain\Z" 


# [arn]	Returns a match where one of the specified characters (a, r, or n) is present	
# [a-n]	Returns a match for any lower case character, alphabetically between a and n	
# [^arn]	Returns a match for any character EXCEPT a, r, and n	
# [0123]	Returns a match where any of the specified digits (0, 1, 2, or 3) are present	
# [0-9]	Returns a match for any digit between 0 and 9	
# [0-5][0-9]	Returns a match for any two-digit numbers from 00 and 59	
# [a-zA-Z]	Returns a match for any character alphabetically between a and z, lower case OR upper case	
# [+]	In sets, +, *, ., |, (), $,{} has no special meaning, so [+] means: return a match for any + character in the string


# import math
# import json

# x = {
#   "name": "John",
#   "age": 30,
#   "married": True,
#   "divorced": False,
#   "children": ("Ann","Billy"),
#   "pets": None,
#   "cars": [
#     {"model": "BMW 230", "mpg": 27.5},
#     {"model": "Ford Edge", "mpg": 24.1}
#   ]
# }

# # print(json.dumps(x,indent=2,separators=(". ", " = ")))
# print(json.dumps(x,indent=2,sort_keys=True))

# x=json.loads("/home/zxl/dev/projects/python/learn_test/json.json")

# print(x)

# print(json.dumps({"name": "John", "age": 30}))
# print(json.dumps(["apple", "bananas"]))
# print(json.dumps(("apple", "bananas")))
# print(json.dumps("hello"))
# print(json.dumps(42))
# print(json.dumps(31.76))
# print(json.dumps(True))
# print(json.dumps(False))
# print(json.dumps(None))

# If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.




# x=math.sqrt(81)
# print(x)


learn_decorator.py

from typing import Any
from functools import wraps


def decorator_function(func):
    @wraps(func)
    def wrapper_func(*args,** kwargs):

        print(f'function decorators excute before {func.__name__}')
        return func(*args,** kwargs)

    return wrapper_func


def logger_file(original_func):
    @wraps(original_func)
    def wrapper(*args, **kwargs):
        print(f"logger file  excute before {original_func.__name__}")
        return original_func(*args, **kwargs)

    return wrapper

def my_timer(original_func):
    import time
    @wraps(original_func)
    def wrapper( *args, **kwargs):
        t1= time.time()
        result = original_func(*args, **kwargs)
        t2 = time.time() - t1
        print(f"{original_func.__name__} run {t2}")
        return result
    return wrapper

class decorator_class():
    def __init__(self,original_func) -> None:
        self.original_func = original_func
    
    # @wraps(self.original_func)
    def __call__(self, *args: Any, **kwds: Any) -> Any:
        print(f'class  decorators excute before {self.original_func.__name__}')
        return self.original_func(*args, **kwds)

@decorator_function
@logger_file
@my_timer
def display(name: str, age: int):
    import time
    time.sleep(1)
    print(f"{name} is {age} years old")

display("lily",22)
# @decorator_function
# def display_exe(*args,** kwargs):
#     print(f"parameters of display_exs ({args} {kwargs})")

# decorators = decorator_function(print_random)

# decorators()


# display()
# display_exe(1,2,hello="world")


learn_file_manipulate.py
import os
import json


with open("/home/zxl/dev/projects/python/learn_test/json.json",'r') as local_file:
    data = json.load(local_file)
    for x in data:
        print(type(x))

local_file.close()
if os.path.exists("demofile.txt"):
  os.remove("demofile.txt")
else:
  print("The file does not exist")

#   To delete an entire folder, use the os.rmdir() method:
os.rmdir("myfolder")


learn_rename_file.py
import os

os.chdir("/home/zxl/dev/projects/python/learn_test/files")

for f in os.listdir():
    file_name,file_ext = os.path.splitext(f)
    category,name = file_name.split("_")
    fname,uid = name.split("-")
    uid = uid.strip().zfill(2)
    category = category.strip()
    fname = fname.strip()
    new_name = f"{uid}-{fname}-{category}{file_ext}"
    os.rename(f,new_name)
    # print(category)
    # print(fname)
    # print(uid)
    # print(file_ext)

